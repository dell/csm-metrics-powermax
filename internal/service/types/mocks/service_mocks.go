/*
 Copyright (c) 2022-2023 Dell Inc. or its subsidiaries. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-metrics-powermax/internal/service/types (interfaces: Service)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/dell/csm-metrics-powermax/internal/service/types"
	gomock "github.com/golang/mock/gomock"
	logrus "github.com/sirupsen/logrus"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// ExportCapacityMetrics mocks base method.
func (m *MockService) ExportCapacityMetrics(arg0 context.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ExportCapacityMetrics", arg0)
}

// ExportCapacityMetrics indicates an expected call of ExportCapacityMetrics.
func (mr *MockServiceMockRecorder) ExportCapacityMetrics(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExportCapacityMetrics", reflect.TypeOf((*MockService)(nil).ExportCapacityMetrics), arg0)
}

// GetLogger mocks base method.
func (m *MockService) GetLogger() *logrus.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(*logrus.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger.
func (mr *MockServiceMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockService)(nil).GetLogger))
}

// GetMaxPowerMaxConnections mocks base method.
func (m *MockService) GetMaxPowerMaxConnections() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaxPowerMaxConnections")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetMaxPowerMaxConnections indicates an expected call of GetMaxPowerMaxConnections.
func (mr *MockServiceMockRecorder) GetMaxPowerMaxConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaxPowerMaxConnections", reflect.TypeOf((*MockService)(nil).GetMaxPowerMaxConnections))
}

// GetMetricsRecorder mocks base method.
func (m *MockService) GetMetricsRecorder() types.MetricsRecorder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetricsRecorder")
	ret0, _ := ret[0].(types.MetricsRecorder)
	return ret0
}

// GetMetricsRecorder indicates an expected call of GetMetricsRecorder.
func (mr *MockServiceMockRecorder) GetMetricsRecorder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetricsRecorder", reflect.TypeOf((*MockService)(nil).GetMetricsRecorder))
}

// GetPowerMaxClients mocks base method.
func (m *MockService) GetPowerMaxClients() map[string]types.PowerMaxClient {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPowerMaxClients")
	ret0, _ := ret[0].(map[string]types.PowerMaxClient)
	return ret0
}

// GetPowerMaxClients indicates an expected call of GetPowerMaxClients.
func (mr *MockServiceMockRecorder) GetPowerMaxClients() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPowerMaxClients", reflect.TypeOf((*MockService)(nil).GetPowerMaxClients))
}

// GetVolumeFinder mocks base method.
func (m *MockService) GetVolumeFinder() types.VolumeFinder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVolumeFinder")
	ret0, _ := ret[0].(types.VolumeFinder)
	return ret0
}

// GetVolumeFinder indicates an expected call of GetVolumeFinder.
func (mr *MockServiceMockRecorder) GetVolumeFinder() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVolumeFinder", reflect.TypeOf((*MockService)(nil).GetVolumeFinder))
}
