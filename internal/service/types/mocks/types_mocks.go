// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-metrics-powermax/internal/service/types (interfaces: MetricsRecorder,MeterCreator)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	types "github.com/dell/csm-metrics-powermax/internal/service/types"
	gomock "github.com/golang/mock/gomock"
	attribute "go.opentelemetry.io/otel/attribute"
	metric "go.opentelemetry.io/otel/metric"
)

// MockMetricsRecorder is a mock of MetricsRecorder interface.
type MockMetricsRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRecorderMockRecorder
}

// MockMetricsRecorderMockRecorder is the mock recorder for MockMetricsRecorder.
type MockMetricsRecorderMockRecorder struct {
	mock *MockMetricsRecorder
}

// NewMockMetricsRecorder creates a new mock instance.
func NewMockMetricsRecorder(ctrl *gomock.Controller) *MockMetricsRecorder {
	mock := &MockMetricsRecorder{ctrl: ctrl}
	mock.recorder = &MockMetricsRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsRecorder) EXPECT() *MockMetricsRecorderMockRecorder {
	return m.recorder
}

// RecordNumericMetrics mocks base method.
func (m *MockMetricsRecorder) RecordNumericMetrics(arg0 string, arg1 []attribute.KeyValue, arg2 types.VolumeCapacityMetricsRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordNumericMetrics", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordNumericMetrics indicates an expected call of RecordNumericMetrics.
func (mr *MockMetricsRecorderMockRecorder) RecordNumericMetrics(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordNumericMetrics", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordNumericMetrics), arg0, arg1, arg2)
}

// RecordStorageGroupPerfMetrics mocks base method.
func (m *MockMetricsRecorder) RecordStorageGroupPerfMetrics(arg0 string, arg1 types.StorageGroupPerfMetricsRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordStorageGroupPerfMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordStorageGroupPerfMetrics indicates an expected call of RecordStorageGroupPerfMetrics.
func (mr *MockMetricsRecorderMockRecorder) RecordStorageGroupPerfMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordStorageGroupPerfMetrics", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordStorageGroupPerfMetrics), arg0, arg1)
}

// RecordVolPerfMetrics mocks base method.
func (m *MockMetricsRecorder) RecordVolPerfMetrics(arg0 string, arg1 types.VolumePerfMetricsRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordVolPerfMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordVolPerfMetrics indicates an expected call of RecordVolPerfMetrics.
func (mr *MockMetricsRecorderMockRecorder) RecordVolPerfMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordVolPerfMetrics", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordVolPerfMetrics), arg0, arg1)
}

// MockMeterCreator is a mock of MeterCreator interface.
type MockMeterCreator struct {
	ctrl     *gomock.Controller
	recorder *MockMeterCreatorMockRecorder
}

// MockMeterCreatorMockRecorder is the mock recorder for MockMeterCreator.
type MockMeterCreatorMockRecorder struct {
	mock *MockMeterCreator
}

// NewMockMeterCreator creates a new mock instance.
func NewMockMeterCreator(ctrl *gomock.Controller) *MockMeterCreator {
	mock := &MockMeterCreator{ctrl: ctrl}
	mock.recorder = &MockMeterCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMeterCreator) EXPECT() *MockMeterCreatorMockRecorder {
	return m.recorder
}

// MetricProvider mocks base method.
func (m *MockMeterCreator) MetricProvider() metric.Meter {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MetricProvider")
	ret0, _ := ret[0].(metric.Meter)
	return ret0
}

// MetricProvider indicates an expected call of MetricProvider.
func (mr *MockMeterCreatorMockRecorder) MetricProvider() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MetricProvider", reflect.TypeOf((*MockMeterCreator)(nil).MetricProvider))
}
