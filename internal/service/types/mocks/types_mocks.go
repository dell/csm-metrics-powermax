/*
 Copyright (c) 2022-2023 Dell Inc. or its subsidiaries. All Rights Reserved.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
*/

// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dell/csm-metrics-powermax/internal/service/types (interfaces: MetricsRecorder,AsyncMetricCreator)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	types "github.com/dell/csm-metrics-powermax/internal/service/types"
	gomock "github.com/golang/mock/gomock"
	asyncfloat64 "go.opentelemetry.io/otel/metric/instrument/asyncfloat64"
	asyncint64 "go.opentelemetry.io/otel/metric/instrument/asyncint64"
)

// MockMetricsRecorder is a mock of MetricsRecorder interface.
type MockMetricsRecorder struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsRecorderMockRecorder
}

// MockMetricsRecorderMockRecorder is the mock recorder for MockMetricsRecorder.
type MockMetricsRecorderMockRecorder struct {
	mock *MockMetricsRecorder
}

// NewMockMetricsRecorder creates a new mock instance.
func NewMockMetricsRecorder(ctrl *gomock.Controller) *MockMetricsRecorder {
	mock := &MockMetricsRecorder{ctrl: ctrl}
	mock.recorder = &MockMetricsRecorderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsRecorder) EXPECT() *MockMetricsRecorderMockRecorder {
	return m.recorder
}

// RecordNumericMetrics mocks base method.
func (m *MockMetricsRecorder) RecordNumericMetrics(arg0 context.Context, arg1 []types.NumericMetric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecordNumericMetrics", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecordNumericMetrics indicates an expected call of RecordNumericMetrics.
func (mr *MockMetricsRecorderMockRecorder) RecordNumericMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecordNumericMetrics", reflect.TypeOf((*MockMetricsRecorder)(nil).RecordNumericMetrics), arg0, arg1)
}

// MockAsyncMetricCreator is a mock of AsyncMetricCreator interface.
type MockAsyncMetricCreator struct {
	ctrl     *gomock.Controller
	recorder *MockAsyncMetricCreatorMockRecorder
}

// MockAsyncMetricCreatorMockRecorder is the mock recorder for MockAsyncMetricCreator.
type MockAsyncMetricCreatorMockRecorder struct {
	mock *MockAsyncMetricCreator
}

// NewMockAsyncMetricCreator creates a new mock instance.
func NewMockAsyncMetricCreator(ctrl *gomock.Controller) *MockAsyncMetricCreator {
	mock := &MockAsyncMetricCreator{ctrl: ctrl}
	mock.recorder = &MockAsyncMetricCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAsyncMetricCreator) EXPECT() *MockAsyncMetricCreatorMockRecorder {
	return m.recorder
}

// AsyncFloat64 mocks base method.
func (m *MockAsyncMetricCreator) AsyncFloat64() asyncfloat64.InstrumentProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncFloat64")
	ret0, _ := ret[0].(asyncfloat64.InstrumentProvider)
	return ret0
}

// AsyncFloat64 indicates an expected call of AsyncFloat64.
func (mr *MockAsyncMetricCreatorMockRecorder) AsyncFloat64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncFloat64", reflect.TypeOf((*MockAsyncMetricCreator)(nil).AsyncFloat64))
}

// AsyncInt64 mocks base method.
func (m *MockAsyncMetricCreator) AsyncInt64() asyncint64.InstrumentProvider {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AsyncInt64")
	ret0, _ := ret[0].(asyncint64.InstrumentProvider)
	return ret0
}

// AsyncInt64 indicates an expected call of AsyncInt64.
func (mr *MockAsyncMetricCreatorMockRecorder) AsyncInt64() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AsyncInt64", reflect.TypeOf((*MockAsyncMetricCreator)(nil).AsyncInt64))
}
